options:
  parameters:
    author: crypie86
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: pythonblocksandbox
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: pythonblocksandbox
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: freq
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: frequency
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-10000'
    step: '1000'
    stop: '10000'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 60.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '20000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: freq
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [360, 500.0]
    rotation: 0
    state: true
- name: blocks_null_sink_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1136, 128.0]
    rotation: 0
    state: enabled
- name: blocks_null_sink_1
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 376.0]
    rotation: 0
    state: disabled
- name: blocks_null_sink_2
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1136, 248.0]
    rotation: 0
    state: enabled
- name: blocks_null_source_0
  id: blocks_null_source
  parameters:
    affinity: ''
    alias: ''
    bus_structure_source: '[[0,],]'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 168.0]
    rotation: 0
    state: enabled
- name: blocks_null_source_1
  id: blocks_null_source
  parameters:
    affinity: ''
    alias: ''
    bus_structure_source: '[[0,],]'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 376.0]
    rotation: 0
    state: disabled
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [896, 132.0]
    rotation: 0
    state: enabled
- name: blocks_throttle_1
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 372.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport matlab.engine\nimport pmt\nimport os\nimport\
      \ time\n\neng = matlab.engine.start_matlab()\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Runs matlab\
      \ executive function every time it registers that [filename] has been modified\
      \ and spits its output out as a message\\nOne caveat is that [filename] needs\
      \ to already exist in the present directory, otherwise there'll be an error\
      \ thrown saying that the file doesn't exist.\"\"\"\n\n    def __init__(self,\
      \ filename = 'noise1kcos.txt'):  # only default arguments here\n        \"\"\
      \"arguments to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Call MATLAB executive(filename)',   #\
      \ will show up in GRC\n            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n\
      \            \n    \n        )\n        self.filename = filename\n        self.time1\
      \ = os.path.getmtime(self.filename)\n        self.message_port_register_out(pmt.intern('chosen\
      \ pattern'))\n        # if an attribute with the same name as a parameter is\
      \ found,\n        # a callback is registered (properties work, too).\n     \
      \   \n\n    def work(self, input_items, output_items):\n        self.time2 =\
      \ os.path.getmtime(self.filename)\n        if(self.time2 != self.time1):\n \
      \           time.sleep(1)\n            self.time1 = self.time2\n           \
      \ print('aya, something changed!') #i think the reason why this goes through\
      \ twice is because its catching on to when the file's still being written, although\
      \ im not sure if dealing with that is even necessary\n            whee = pmt.to_pmt(int(eng.executive(self.filename)))\n\
      \            self.message_port_pub(pmt.intern('chosen pattern'), whee)\n   \
      \     \n        output_items[0][:] = 1\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    filename: '''bababooey.bin'''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Call MATLAB executive(filename)', 'blk', [('filename', "'noise1kcos.txt'")],
      [('0', 'complex', 1)], [('0', 'complex', 1), ('chosen pattern', 'message', 1)],
      "Runs matlab executive function every time it registers that [filename] has
      been modified and spits its output out as a message\nOne caveat is that [filename]
      needs to already exist in the present directory, otherwise there'll be an error
      thrown saying that the file doesn't exist.", ['filename'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 216.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\nimport subprocess\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Block to loop [script_name (the spectrum sampling block)] every [delay (5)]\
      \ seconds and passing in [script_args]\"\"\"\n\n    def __init__(self, script_name='sandbox.py',\
      \ delay = 5, script_args = '--filename ./noise1kcos.txt'):  # only default arguments\
      \ here\n        \"\"\"arguments to this function show up as parameters in GRC\"\
      \"\"\n        gr.sync_block.__init__(\n            self,\n            name='Loop\
      \ Script',   # will show up in GRC\n            in_sig=[np.complex64],\n   \
      \         out_sig=[np.complex64]\n        )\n        # if an attribute with\
      \ the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.script_name = './' + script_name\n \
      \       self.delay = delay\n        self.args = script_args\n        self.cmdlstr\
      \ = self.script_name + ' ' + self.args\n        self.cmdlist = self.cmdlstr.split()\n\
      \n    def work(self, input_items, output_items):\n        print('running the\
      \ script', self.script_name, 'with args', self.args)\n        subprocess.run(self.cmdlist)\n\
      \        print('finished')\n        time.sleep(self.delay)\n        output_items[0][:]\
      \ = input_items[0]\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    delay: '5'
    maxoutbuf: '0'
    minoutbuf: '0'
    script_args: '''--filename ./noise1kcos.txt'''
    script_name: '''sandbox.py'''
  states:
    _io_cache: ('Loop Script', 'blk', [('script_name', "'sandbox.py'"), ('delay',
      '5'), ('script_args', "'--filename ./noise1kcos.txt'")], [('0', 'complex', 1)],
      [('0', 'complex', 1)], 'Block to loop [script_name (the spectrum sampling block)]
      every [delay (5)] seconds and passing in [script_args]', ['delay', 'script_name'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [368, 372.0]
    rotation: 0
    state: disabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded\
      \ Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Message Reader',   # will show up in GRC\n    \
      \        in_sig=[np.complex64],\n            out_sig=[np.complex64]\n      \
      \  )\n        self.message_port_register_in(pmt.intern('msgin'))\n        self.set_msg_handler(pmt.intern('msgin'),\
      \ self.handle_msg)\n        # if an attribute with the same name as a parameter\
      \ is found,\n        # a callback is registered (properties work, too).\n  \
      \      self.thingy = 1\n        \n    def handle_msg(self, msg):\n        self.thingy\
      \ = pmt.to_python(msg)\n    def work(self, input_items, output_items):\n   \
      \     print(self.thingy)\n        output_items[0][:] = input_items[0]\n    \
      \    return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Message Reader', 'blk', [], [('0', 'complex', 1), ('msgin', 'message',
      1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple multiply
      const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 232.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [640, 524.0]
    rotation: 0
    state: true
- name: spectrum_sampler_v2_0
  id: spectrum_sampler_v2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fftlen: '64'
    filename: ./copytest2.bin
    numsnaps: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [888, 524.0]
    rotation: 0
    state: true

connections:
- [analog_sig_source_x_0, '0', blocks_throttle_1, '0']
- [analog_sig_source_x_0, '0', qtgui_freq_sink_x_0, '0']
- [blocks_null_source_0, '0', epy_block_0, '0']
- [blocks_null_source_0, '0', epy_block_2, '0']
- [blocks_null_source_1, '0', epy_block_1, '0']
- [blocks_throttle_0, '0', blocks_null_sink_0, '0']
- [blocks_throttle_1, '0', blocks_null_sink_1, '0']
- [blocks_throttle_1, '0', spectrum_sampler_v2_0, '0']
- [epy_block_0, '0', blocks_throttle_0, '0']
- [epy_block_0, chosen pattern, epy_block_2, msgin]
- [epy_block_1, '0', blocks_throttle_1, '0']
- [epy_block_2, '0', blocks_null_sink_2, '0']

metadata:
  file_format: 1
